interface Preset {
    name: string;
    date: string;
    clearFrame: boolean;
    components: Components[];
}

type RenderGroup = 'Render';
type MiscGroup = 'Misc';
type TransGroup = 'Trans';

interface Components {
    Comment?: Comment;
    EffectList?: EffectList;
}

interface Comment {
    type: 'Comment',
    group: MiscGroup,
    text: 'string';
}

interface EffectList {
    type: 'EffectList';
    enabled: boolean;
    clearFrame: boolean;
    input: 'IGNORE';
    output: 'REPLACE';
    inAdjustBlend: number;
    outAdjustBlend: number;
    inBuffer: number;
    outBuffer: number;
    inBufferInvert: boolean;
    outBufferInvert: boolean;
    enableOnBeat: boolean;
    enableOnBeatFor: number;
    // code: {
    //     enabled: boolean,
    //     init: 'string',
    //     perFrame: 'string'
    // },
    components: Components[];
}

interface AddBorders {
    type: 'AddBorders';
    group: MiscGroup;
    enabled: boolean;
    color: string;
    size: number;
}

interface BufferSave {
    type: BufferSave;
    group: MiscGroup;
    action: "SAVE" | "RESTORE" | "ALTERNATE_SAVE_RESTORE" | "ALTERNATE_RESTORE_SAVE";
    bufferId: 18;
    blendMode: 'REPLACE' | 'FIFTY_FIFTY' | 'ADDITIVE' | 'EVERY_OTHER_PIXEL' | 'SUB_DEST_SRC' | 'EVERY_OTHER_LINE' | 'XOR' | 'MAXIMUM' | 'MINIMUM' | 'SUB_SRC_DEST' | 'MULTIPLY' | 'ADJUSTABLE';
    adjustBlend: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
}

interface CustomBPM {
    type: "CustomBPM";
    group: MiscGroup;
    enabled: boolean;
    mode: "ARBITRARY";
    arbitraryValue: 33;
    skipValue: 33;
    skipFirstBeats: 33;
}

interface SetRenderMode {
    type: SetRenderMode;
    group: MiscGroup;
    blend: REPLACE;
    adjustBlend: 0;
    lineSize: 1;
    enabled: boolean;
}

interface BassSpin {
    type: BassSpin;
    group: TransGroup;
    enabledLeft: boolean;
    enabledRight: boolean;
    colorLeft: #ffffff;
    colorRight: #ffffff;
    mode: TRIANGLES;
}

interface ClearScreen {
    type: ClearScreen;
    group: RenderGroup;
    enabled: boolean;
    color: #000000;
    blendMode: ADDITIVE;
    onlyFirst: boolean;
}

interface DotFountain {
    type: DotFountain;
    group: RenderGroup;
    rotationSpeed: 16;
    colorTop: #1c6b18;
    colorHigh: #ff0a23;
    colorMid: #2a1d74;
    colorLow: #9036d9;
    colorBottom: #6b88ff;
    angle: -20;
}

interface DotGrid {
    type: DotGrid;
    group: RenderGroup;
    // colors: [
    //     #ffffff
    // ],
    spacing: 8;
    speedX: 128;
    speedY: 128;
    blendMode: FIFTY_FIFTY;
}

interface DotPlane {
    type: DotPlane;
    group: RenderGroup;
    rotationSpeed: 16;
    colorTop: #1c6b18;
    colorHigh: #ff0a23;
    colorMid: #2a1d74;
    colorLow: #9036d9;
    colorBottom: #6b88ff;
    angle: -20;
}

interface MovingParticle {
    type: MovingParticle;
    group: RenderGroup;
    enabled: boolean;
    onBeatSizeChange: boolean;
    color: #ffffff;
    distance: 16;
    particleSize: 8;
    onBeatParticleSize: 8;
    blendMode: FIFTY_FIFTY;
}

interface OnBeatClear {
    type: OnBeatClear;
    group: RenderGroup;
    color: #ffffff;
    blendMode: FIFTY_FIFTY;
    clearBeats: 1;
}

interface OscilliscopeStar {
    type: OscilliscopeStar;
    group: RenderGroup;
    audioChannel: CENTER;
    positionX: CENTER;
    // colors: [
    //     #ffffff
    // ],
    size: 8;
    rotation: 3;
}

interface Ring {
    type: Ring;
    group: RenderGroup;
    audioChannel: CENTER;
    positionX: CENTER;
    // colors: [
    //     #ffffff
    // ],
    size: 8;
}

interface RotatingStars {
    type: RotatingStars;
    group: RenderGroup;
    // colors: [
    //     #ffffff
    // ]
}

interface Simple {
    type: Simple;
    group: RenderGroup;
    audioSource: Waveform;
    renderType: Dots;
    audioChannel: CENTER;
    positionY: CENTER;
    // colors: [
    //     #ffffff
    // ]
}

interface Starfield {
    type: Starfield;
    group: RenderGroup;
    enabled: 1;
    color: #ffffff;
    blendMode: ADDITIVE;
    WarpSpeed: 6;
    MaxStars_set: 350;
    onbeat: 0;
    spdBeat: 4;
    durFrames: 15;
}

interface SuperScope {
    type: SuperScope;
    group: RenderGroup;
    // code: {
    //     init: n=200,
    //     perFrame: ,
    //     onBeat: ,
    //     perPoint: iz=1.3+sin(r+i*$PI*2)*(v+0.5)*0.88; ix=cos(r+i*$PI*2)*(v+0.5)*.88; iy=-0.3+abs(cos(v*$PI)); x=ix/iz;y=iy/iz;
    // },
    audioChannel: CENTER;
    audioSource: WAVEFORM;
    // colors: [
    //     #ffffff
    // ],
    drawMode: DOTS;
}

interface TexerII {
    type: TexerII;
    group: RenderGroup;
    imageSrc: ;
    resizing: boolean;
    wrapAround: boolean;
    colorFiltering: boolean;
    // code: {
    //     init: // This shows how to use texer for 3D particles\r\n// Additive or maximum blend mode should be used\r\nxr=(rand(50)/500)-0.05;\r\nyr=(rand(50)/500)-0.05;\r\nzr=(rand(50)/500)-0.05;,
    //     perFrame: // Rotation along x/y/z axes\r\nxt=xt+xr;yt=yt+yr;zt=zt+zr;\r\n// Shrink rings\r\nbt=max(0,bt*.95+.01);\r\n// Aspect correction\r\nasp=w/h;\r\n// Dynamically adjust particle count based on ring size\r\nn=((bt*40)|0)*3;,
    //     onBeat: // New rotation speeds\r\nxr=(rand(50)/500)-0.05;\r\nyr=(rand(50)/500)-0.05;\r\nzr=(rand(50)/500)-0.05;\r\n// Ring size\r\nbt=1.2;\r\nn=((bt*40)|0)*3;,
    //     perPoint: // 3D object\r\nx1=sin(i*$pi*6)/2*bt;\r\ny1=above(i,.66)-below(i,.33);\r\nz1=cos(i*$pi*6)/2*bt;\r\n\r\n// 3D rotations\r\nx2=x1*sin(zt)-y1*cos(zt);y2=x1*cos(zt)+y1*sin(zt);\r\nz2=x2*cos(yt)+z1*sin(yt);x3=x2*sin(yt)-z1*cos(yt);\r\ny3=y2*sin(xt)-z2*cos(xt);z3=y2*cos(xt)+z2 *sin(xt);\r\n\r\n// 2D Projection\r\niz=1/(z3+2);\r\nx=x3*iz;y=y3*iz*asp;\r\nsizex=iz*2;sizey=iz*2;
    // }
}

interface TexerII {
    type: Text;
    group: RenderGroup;
    enabled: boolean;
    color: #ffffff;
    blendMode: REPLACE;
    onBeat: boolean;
    insertBlanks: boolean;
    randomPosition: boolean;
    verticalAlign: CENTER;
    horizontalAlign: CENTER;
    onBeatSpeed: 15;
    normSpeed: 15;
    weight: DONTCARE;
    italic: boolean;
    underline: boolean;
    strikeOut: boolean;
    charSet: 0;
    fontName: ;
    text: Demo;
    outline: boolean;
    outlineColor: #000000;
    shiftX: 0;
    shiftY: 0;
    outlineShadowSize: 1;
    randomWord: boolean;
    shadow: boolean;
}

interface Timescope {
    type: Timescope;
    group: RenderGroup;
    enabled: boolean;
    color: #ffffff;
    blendMode: ADDITIVE;
    bands: 39;
}

interface BlitterFeedback {
    type: BlitterFeedback;
    group: Misc;
    zoom: 30;
    onBeatZoom: 30;
    blendMode: REPLACE;
    onBeat: boolean;
    bilinear: boolean;
}

interface Blur {
    type: Blur;
    group: TransGroup;
    blur: HEAVY;
    round: DOWN;
}

interface Brightness {
    type: Brightness;
    group: TransGroup;
    enabled: boolean;
    blendMode: ADDITIVE;
    red: 0;
    green: 0;
    blue: 0;
    separate: boolean;
    excludeColor: #000000;
    exclude: boolean;
    distance: 16;
}

interface Bump {
    type: Bump;
    group: TransGroup;
    enabled: boolean;
    onBeat: boolean;
    duration: 15;
    depth: 30;
    onBeatDepth: 100;
    blendMode: REPLACE;
    // code: {
    //     init: t=0;,
    //     perFrame: ,
    //     onBeat: x=0.5+cos(t)*0.3;\r\ny=0.5+sin(t)*0.3;\r\nt=t+0.1;
    // },
    showDot: boolean;
    invertDepth: boolean;
    depthBuffer: 29;
}

interface ChannelShift {
    type: ChannelShift;
    group: Misc;
    mode: BGR;
    onBeatRandom: boolean;
}

interface ColorClip {
    type: ColorClip;
    group: TransGroup;
    mode: ABOVE;
    color: #202020;
    outColor: #202020;
    level: 10;
}

interface ColorMap {
    type: ColorMap;
    group: TransGroup;
    key: RED;
    blendMode: REPLACE;
    mapCycleMode: SINGLE;
    adjustBlend: 0;
    dontSkipFastBeats: boolean;
    cycleSpeed: 8;
    // maps: [
    //     {
    //         index: 0,
    //         enabled: boolean,
    //         colors: [
    //             {
    //                 color: #000000,
    //                 position: 0
    //             },
    //             {
    //                 color: #ffffff,
    //                 position: 255
    //             }
    //         ],
    //         id: 94483456,
    //         fileName:
    //     }
    // ]
}

interface ColorModifier {
    type: ColorModifier;
    group: TransGroup;
    recomputeEveryFrame: boolean;
    // code: {
    //     init: ,
    //     perFrame: ,
    //     onBeat: ,
    //     perPoint: red=(min(1,red*2)-red)*2;\r\nred=(min(1,red*2)-red)*2;\r\ngreen=red; blue=red;
    // }
}

interface ColorReduction {
    type: ColorReduction;
    group: TransGroup;
    colors: 2;
}

interface Colorfade {
    type: Colorfade;
    group: TransGroup;
    enabled: boolean;
    onBeat: boolean;
    onBeatRandom: boolean;
    fader1: 8;
    fader2: -8;
    fader3: -8;
    beatFader1: 8;
    beatFader2: -8;
    beatFader3: -8;
}

interface ConvolutionFilter {

}

interface DynamicDistanceModifier {
    type: DynamicDistanceModifier,
    group: Trans,
    // code: {
    //     init: u=1;t=0,
    //     perFrame: t=t+u;t=min(100,t);t=max(0,t);u=if(equal(t,100),-1,u);u=if(equal(t,0),1,u),
    //     onBeat: ,
    //     perPoint: d=d-sigmoid((t-50)/100,2)
    // },
    blendMode: REPLACE;
    bilinear: boolean;
}

interface DynamicMovement {
    type: DynamicMovement;
    group: TransGroup;
    // code: {
    //     init: c=200;f=0;dt=0;dl=0;beatdiv=8,
    //     perFrame: f = f + 1;\r\nt = ((f * $pi * 2)/c)/beatdiv;\r\ndt = dl + t;\r\ndr = 18+(cos(dt)*12);,
    //     onBeat: c=f;f=0;dl=dt,
    //     perPoint: d=d*(1+(cos(r*6) * .05));\r\nr=r-(sin(d*dr) * .05);\r\nd = d * .98;
    // },
    bFilter: boolean;
    coord: POLAR;
    gridW: 32;
    gridH: 32;
    blend: boolean;
    wrap: boolean;
    buffer: 43;
    alphaOnly: boolean;
}

interface DynamicShift {
    type: DynamicShift;
    group: TransGroup;
    // code: {
    //     init: d=0;,
    //     perFrame: x=sin(d)*1.4; y=1.4*cos(d); d=d+0.01;,
    //     onBeat: d=d+2.0
    // },
    blendMode: Replace;
    bilinear: boolean;
}

interface FadeOut {
    type: FadeOut;
    group: TransGroup;
    speed: 16;
    color: #000000;
}

interface FastBrightness {
    type: FastBrightness;
    group: TransGroup;
    factor: 2;
}

interface Grain {
    type: Grain;
    group: TransGroup;
    enabled: boolean;
    blendMode: ADDITIVE;
    amount: 100;
    static: boolean;
}

interface Interferences {
    type: Interferences,
    group: Trans,
    enabled: boolean,
    numberOfLayers: 2,
    distance: 10,
    alpha: 128,
    rotation: 0,
    blendMode: REPLACE,
    onBeatDistance: 32,
    onBeatAlpha: 192,
    onBeatRotation: 25,
    separateRGB: boolean,
    onBeat: boolean,
    speed: 0.19999998807907104;
}

interface Invert {
    type: Invert,
    group: Trans,
    enabled: boolean
}

interface Invert {
    type: Mirror;
    group: TransGroup;
    enabled: boolean;
    topToBottom: boolean;
    bottomToTop: boolean;
    leftToRight: boolean;
    rightToLeft: boolean;
    onBeatRandom: boolean;
    smoothTransition: boolean;
    transitionDuration: 4;
}

interface Mosaic {
    type: Mosaic,
    group: Trans,
    enabled: boolean,
    squareSize: 50,
    onBeatSquareSize: 1,
    blendMode: REPLACE,
    onBeatSizeChange: boolean,
    onBeatSizeDuration: 15;
}

interface Movement {
    type: Movement;
    group: TransGroup;
    builtinEffect: 5 Pointed Distro;
    output: Replace;
    sourceMapped: boolean;
    coordinates: 0;
    bilinear: boolean;
    wrap: boolean;
    code: d = d * (0.95 + (cos(((r-$PI*0.5) * 5.0) - ($PI / 2.50)) * 0.03)),;
}

interface MultiDelay {
    type: MultiDelay;
    group: TransGroup;
    mode: DISABLED;
    activeBuffer: 0;
    useBeats0: boolean;
    delay0: 0;
    useBeats1: boolean;
    delay1: 0;
    useBeats2: boolean;
    delay2: 0;
    useBeats3: boolean;
    delay3: 0;
    useBeats4: boolean;
    delay4: 0;
    useBeats5: boolean;
    delay5: 0;
}

interface MultiFilter {
    type: MultiFilter;
    group: Misc;
    enabled: boolean;
    effect: CHROME;
    onBeat: boolean;
}

interface RotoBlitter {
    type: RotoBlitter;
    group: TransGroup;
    zoom: 31;
    rotate: 31;
    blendMode: REPLACE;
    onBeatReverse: boolean;
    reversalSpeed: 0;
    onBeatZoom: 31;
    onBeat: boolean;
    bilinear: boolean;
}

interface Scatter {
    type: Scatter;
    group: TransGroup;
    enabled: boolean;
}

interface Scatter {
    type: Texer;
    group: Misc;
    image: ;
    input: REPLACE;
    blendMode: MASKED_TEXTURE;
    particles: 100;
}

interface UniqueTone {
    type: UniqueTone;
    group: TransGroup;
    enabled: boolean;
    color: #ffffff;
    blendMode: ADDITIVE;
    invert: boolean;
}

interface VideoDelay {
    type: VideoDelay,
    group: TransGroup,
    enabled: boolean,
    useBeats: boolean,
    delay: 10;
}

interface WaterBump {
    type: WaterBump;
    group: TransGroup;
    enabled: boolean;
    density: 6;
    depth: 600;
    random: boolean;
    dropPositionX: 1;
    dropPositionY: 1;
    dropRadius: 40;
    method: 0;
}

interface Water {
    type: Water;
    group: TransGroup;
    enabled: boolean;
}
